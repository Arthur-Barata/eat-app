// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Eatery {
  id             String        @id @default(uuid())
  name           String
  email          String        @unique
  password       String
  cnpj           String?
  logoImage      String?
  marketingImage String?
  address        Address?
  items          Items[]
  reatedAt       DateTime      @default(now())
  upDatedAt      DateTime      @updatedAt
  addressId      String
  assessments    Assessments[]
}

model Items {
  id           String         @id @default(uuid())
  name         String
  image        String?
  price        Decimal
  isAvailable  Boolean        @default(true)
  category     String
  eatery       Eatery?        @relation(fields: [eateryId], references: [id])
  eateryId     String
  createdAt    DateTime       @default(now())
  upDatedAt    DateTime       @updatedAt
  ordersId     String?
  itemsOnOrdes ItemsOnOrdes[]
}

model WorkInformation {
  id           String   @id @default(uuid())
  isOpen       Boolean
  openHour     Int
  closeHour    Int
  deliveryTime Int
  pickUpTime   Int
  createdAt    DateTime @default(now())
  upDatedAt    DateTime @updatedAt
}

model Address {
  id           String  @id @default(uuid())
  number       String
  street       String
  neighborhood String
  city         String
  state        String
  postalCode   String
  eateryId     String  @unique
  eatery       Eatery? @relation(fields: [eateryId], references: [id])
}

model Assessments {
  id       String @id @default(uuid())
  rate     Int
  comment  String
  eatery   Eatery @relation(fields: [eateryId], references: [id])
  eateryId String
}

model Orders {
  id             String         @id @default(uuid())
  custumerName   String
  custumerNumber String
  paymentMethod  String
  status         String
  obs            String
  isDelivery     Boolean
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  users          Users?         @relation(fields: [usersId], references: [id])
  usersId        String?
  itemsOnOrdes   ItemsOnOrdes[]
}

model Users {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  orders    Orders[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ItemsOnOrdes {
  itemId    String
  item      Items    @relation(fields: [itemId], references: [id])
  orderId   String
  order     Orders   @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([itemId, orderId])
}
